Formerly http://poe.perl.org/action/edit?id=POE_Documentation/Style_Glossary

---

== Glossary ==

POE docs throw around lots of odd words and phrases.  It's confusing
to the reader when they're used inconsistently, so documentation
authors should have a good grasp of what they mean.

Woe unto anyone-- especially [[Rocco]]-- who uses these terms
incorrectly.

Actually, this might make a great starting point for the POE
documentation itself.  It covers a lot of concepts in broad strokes,
and it could link to more detailed discussion of things.

=== alarm ===

A timer that dispatches an event at an absolute time.

see: delay, dispatch, event, timer

=== asynchronous ===

Happening at a different time.  Literally, not coinciding in time.
Handlers for queued events run asynchronously; that is, they are
invoked after the current event has been handled.

see: dispatch, event, synchronous

=== call ===

To immediately invoke an event handler, passing the event to it
directly instead of posting it through the queue.

see: dispatch, immediate event

=== callback ===

A code reference that is passed to a library so that it may be called
when something has occurred.  The library calls the main program back,
rather than returning something.

Callbacks are useful in event driven programs since they often provide
a form of concurrency.  The main program can continue on, eventually
receiving notification via callback that some background task has
finished.

see: event driven program, postback

=== client session ===

A session that requests a service from another session.  Clients are
often custom code; servers are usually pre-written or reusable
components.

see: component, server session, session

=== component ===

A module or library containing one or more POE sessions.

Components can be divided into three types, based on their interfaces:
servlets, libraries, and hybrids.

"Servlet" components set up stand-alone sessions that interact with
the rest of the program through events.  Client sessions post requests
at servelets, and the servlets post responses back.

Library components present a more traditional call and callback
interface.  Programs call functions within the component that in turn
interact with its underlying session.  Events occurring within the
session are passed back to the program through callbacks.  It's possible to
completely hide POE this way.

Hybrid components provide some mix of the other two interfaces.  To
date, nobody has written a hybrid component.

see: callback, nfa session, session

=== cooperative multitasking ===

A form of multitasking where the programs themselves decide when to
end their timeslices and allow other programs the chance to run.  POE
uses cooperative multitasking.

Cooperative multitasking can be dangerous because a single thread or
process can hold a timeslice indefinitely.  It can also be more
efficient: The system spends less time switching between threads, so
it has more opportunity to run the code within them.

see: pre-emptive multitasking, timeslice

=== custom event ===

An event generated by a program, as opposed to a standard event that
POE generates itself.

see: event, standard event

=== delay ===

A timer that dispatches an event after an interval of time has
elapsed.

see: alarm, dispatch, event, timer

=== dispatch ===

To call an event handler using the event's fields as parameters.

Each event is dispatched when it arrive at the head of the Kernel's
event queue.  Dispatching an event clears the way for the next one,
and so on, until the queue empties.  Event handlers and resource
watchers may post new events into the queue.

see: event, event fields, event handler, event handler parameters,
event queue, immediate event, kernel, post, queued event

=== driver ===

A member of the Wheels I/O abstraction that performs low-level raw I/O
with a filehandle.  A driver's sole purpose is to hide the specific
guts of some form of file I/O.

Drivers both send and receive, but it's not necessary to use them in
both directions.  Drivers' sending sides may maintain write buffers,
so sending data to a wheel often means it is queued and written later.

Drivers buffer data to be sent, while filters buffer received data
until it can be converted.

Drivers don't depend on any other part of POE.  They can be used by
themselves in other programs.

see: filter, raw data, record, wheel, Sessions and Wheels

=== event ===

A message that notifies a session when something has happened.

Events often convey information about resources that have become
active.  They're are also used for other things, including
self-notification, yielding timeslices to other sessions, and
inter-session communication.

Every event includes fields that are passed to its handler as
parameters.

see: dispatch, event fields, event handler, event handler parameters,
immediate event, kernel, queued event, resource

=== event driven programming ===

Programs that react to events as they occur rather than performing
tasks in a linear fashion.  Events are the impetus which drives these
programs instead of some pre-set procedure.

User interfaces are classical event driven programs.  They can't know
what their users will do next, so they must wait for events to happen
and handle them when they do.  Shells, for example, wait for user
events (commands) and then invoke their handlers (usually programs).

Event driven programs often seem inside-out because their main loops
are part of the event management library.  Programs are usually
bunches of event handlers and a tiny initialization stub.  This
reverses the roles of program and library: the library calls the
program to perform tasks.  While this may seem awkward, it is elegant
and concise when properly applied.

see: event, event handler, resource

=== event fields ===

The elements of an event that describe it.  They are passed as
parameters to each event's handler function.

The Kernel manages fields like the event's name, the session it was
sent to, and the session that sent it.  The session manages its own
fields, including its heap and the object or package the handler
belongs to.

Many events include other type specific fields.

see: dispatch, event, event handler parameters, heap, immediate event,
kernel, queued event, resource

=== event handler ===

Code that is called when an event is dispatched.

Event handlers are atomic.  Only one handler can run at a time in any
given thread.  Perl's threads are still experimental, so POE does not
use them.  For now, this means that a program can only run one event
handler at a time.

Event handlers receive their events as parameters.  Part of each event
includes its runtime context, so the same code can handle events in
several sessions without becoming confused.

Handlers are bound to the events they handle whenever a new session is
created.

see: dispatch, event, event fields, event handler parameters, kernel,
nfa session, session, state, state machine, thread

=== event handler parameters ===

The parameters given to an event handler.  These correspond to the
event's different fields.

see: dispatch, event, event fields, heap, immediate event, queued
event, resource, runstate

=== event loop ===

A program's main control loop.  This loop contains an event queue, an
event dispatcher, and one or more ways to create new events.

see: event queue, dispatch, main loop, resource, resource watcher

=== event queue ===

An ordered list of pending events, managed by POE's kernel on behalf
of every session.  It ensures that each event is dispatched in its
proper turn.

Immediate events are dispatched right away, bypassing the queue.

see: dispatch, event, event handler, immediate event, queued event

=== event substrate ===

A lower-level event loop that POE uses internally.  Since it's
difficult to have multiple event loops in a single program, POE is
written so it can use others instead of its own select() loop.  This
allows POE to support Tk, Gtk, IO::Poll, and Event.  Adding support
for a new event system is as easy (?) as writing a substrate that
implements a small set of basic features.

see: event loop, event queue, main loop

=== filter ===

A member of the Wheels I/O abstraction that translates data between
raw streams and logical records.  A filter's sole purpose is to hide
the specific guts of some low-level protocol.

Filters are bidirectional.  Their sending sides translate complete
logical records into streams.  Their receiving sides buffer streamed
data, framing it into logical records as complete ones arrive.

Filters buffer received data until it can be converted, while drivers
buffer data to be sent.

Filters don't depend on any other part of POE.  They can be used by
themselves in other programs.

see: driver, raw data, record, wheel, Sessions and Wheels

=== heap ===

A session's unique storage area.

Every event handler receives a parameter that gives it access to the
current session's heap.  They may use this to store or access
persistent data between events.

see: dispatch, event fields, event handler parameters, runstate,
session

=== immediate event ===

An event that is dispatched immediately, bypassing the kernel's queue.

Immediate events are mainly used to dispatch events that must be
handled right away.  I/O resource watchers are the most notable
sources of immediate events.  I/O resources must be serviced
immediately, otherwise their watchers would generate streams of
redundant events to signal their continued readiness.

Sessions that dispatch immediate events must wait for the handler to
complete.  This gives the caller access to a handler's return value,
which is sometimes useful.

It can be tricky to mix immediate I/O events with queued ones.  A
convenient way to prevent I/O from generating responses out of turn is
to always respond through queued events.  Queuing the responses this
way ensures that they arrive at clients in the same order they
occurred.

see: dispatch, event, queued event, time-critical resource, watcher

=== I/O resource ===

A resource that performs I/O.  A filehandle.

see: resource

=== kernel ===

POE's event queue, dispatcher, main loop, resource manager, and core
resource watcher library.

The kernel does just about everything, including taking care of many
tedious little housekeeping tasks.  The kernel spends most of its time
dispatching events and reference couting resources.

see: dispatch, event, immediate event, nfa session, queued event,
resource, session

=== main loop ===

A program's outermost control loop.  The main loop usually contains a
program's event dispatcher and resource watching code.

see: event loop, event queue, dispatch, resource, resource watcher

=== nfa session ===

A session that runs a nondeterministic finite automaton, or NFA.

NFAs are state machines that doesn't necessarily know which states
follow each other when they starts.  Rather, they decide the next
state to go into based on runtime conditions.

These sessions differ from plain ones in a few fundamental ways.  NFA
sessions can have more than one state of existence.  Each NFA state
has its own set of event handlers which may overlap with other states.
Unhandled events are fatal errors in NFAs.

NFA sessions function somewhat like several sets of event handlers
which can be swapped in and out quickly at runtime.

see: event, immediate event, queued event, session, state, state
machine, state transition

_design note: it would be keen to have several different subsets of
event handlers which could be swapped independently_

=== post ===

To place an event in the kernel's queue.  The event will be dispatched
when its turn comes up.

see: call, dispatch, event, immediate event, queued event

=== pre-emptive multitasking ===

A form of multitasking where timeslices are parcelled out to programs
by the operating system or hardware.  The programs are interrupted and
resumed, often without their knowledge of this happening, hundreds or
thousands of times a second.  This creates the illusion that they're
all running concurrently, but it's often the case that only one
program's instructions have a chance to execute in any given moment.

Pre-emptive multitasking is often considered safer in multi-user
situations.  A single program can't hold a timeslice indefinitely when
pre-emptive multitasking is in effect.

see: cooperative multitasking, timeslice

=== queued event ===

An event that is posted through the kernel's queue.  This kind of
event will be dispatched when it reaches the head of the queue.

There is a some latency involved since any events already in the queue
must be dispatched first.  For this reason, queued events aren't used
for time-critical resources.

see: call, event, event fields, event handler parameters, immediate
event, resource

=== raw data ===

The stuff streams are made of.  Data without form or structure.

Raw data probably has some internal structure, but it's not readily
apparent or usable until something translates it into a more
meaningful form.

see: filter, record

=== record ===

A logical unit of data, structured into some meaningful or useful
form.

Common record types are: A line of text, a fixed-length block of data,
a length-prepended block of data, an HTTP request, an HTTP response,
and a Perl reference.  Each of these examples is used by at least one
of POE's standard filters.

see: filter, raw data

=== resource ===

Something which may be allocated and watched for events.  For example,
a filehandle.

Once a resource is watched, the kernel will generate new events
whenever it it becomes ready to be serviced.

see: event fields, event handler parameters, immediate event, I/O
resource, queued event

=== resource watcher ===

Something that watches a resource, generating events to notify the
program when the resource's status has changed.

see: event, kernel, resource

=== runstate ===

A state machine's unique storage area.  This is an NFA session's
equivalent of a heap.

see: heap, nfa session, session

=== server session ===

A session that advertises a service and processes requests for that
service to be performed on behalf of client sessions.  Server sessions
are usually pre-written or reusable components.

see: client session, component, session

=== session ===

A group of related event handlers bound together with a common heap
and managed as a unit by the kernel.

Sessions are the kernel's unit of resource management; whenever an
event handler watches a new resource, it's allocated to the session.
When the session stops, its lingering resources are freed.
Contrawise, the kernel knows when sessions have released all their
event generating resources, and it can stop sessions which have become
stagnant or idle.

see: heap, immediate event, kernel, nfa session, queued event

=== standard event ===

A pre-defined event generated by the system itself, as opposed to a
custom event.  POE emits a number of standard events that notify
programs when routine things happen.

see: event, custom event

=== state ===

A session's state of being or current mode of operation.

A state defines the set of functions a session is currently using to
handle events.  These functions may not necessarily handle the same
set of events as other states do.

When an event is dispatched, it will invoke the appropriate handler in
the session's current state.

see: event, event handler, session, nfa session, state machine

=== state machine ===

A program or algorithm with multiple operating modes.  These modes are
known an states.

see: nfa session, session, state

=== state transition ===

A move from one state to another in a state machine.  The state
machine will use a different set of event handlers from that point on.

see: state, state machine

== synchronous ===

Happening at the same time.  Literally, coinciding in time.  Handlers
for immediate events run synchronously; that is, they are invoked
within the current event's handler.  The current handler pauses until
the immediate event has been dispatched fully.

see: asynchronous, dispatch, event

=== thread ===

A path of execution through a program.  Threads are cool because some
programs can have several of them going at once.  This provides the
same multitasking features as forking, but memory is shared by
default.

At any rate, POE doesn't use threads because Perl's support of them is
still considered experimental.  A threaded POE design has been worked
out, and it will be implemented once Perl's threads settle down.

Meanwhile, POE can provide cooperative multitasking if programs are
careful.

see: cooperative multitasking

=== time-critical resource ===

A resource that must be serviced as soon as possible.  For this
reason, they dispatch their events immediately.

see: call, dispatch, immediate event, post, queue, queued event

=== timer ===

A resource that generates an event based on the passage of time.  POE
has two kinds of timers: alarms and delays.  The difference is in how
they watch time.

see: alarm, delay

=== timeslice ===

A slice of time given to a thread or process so that it may run some
code.  Multitasking is the fine art of dividing up a linear stream of
time between two or more tasks.  These time divisions are often
referred to as timeslices.

see: cooperative multitasking, pre-emptive multitasking, thread

=== wheel ===

An interface, often to some kind of I/O abstraction.  Wheels usually
contain event handlers that they incorporate into sessions to perform
tasks.

Wheels often mediate between sessions, filters, and drivers.

see: driver, filter, Sessions and Wheels, session

=== yield ===

To post an event to the same session.  To pause, allowing other events
to be dispatched.

The most direct way a session can yield time to other sessions is for
its event handler to post itself another event and return.  The
session becomes idle while this new event waits in the kernel's queue,
and other events have the opportunity to take their turns.  This
simulates cooperative multitasking by letting each session have a
chance to run.

see: cooperative multitasking


This style guide is copyright 2001-2002 by Rocco Caputo.  All rights
reserved.  This guide is free text and may be distributed and/or
modified under the same terms as Perl itself.
